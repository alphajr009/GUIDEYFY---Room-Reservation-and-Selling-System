{"version":3,"names":["cleanAssetCatalog","catalogDir","files","fs","readdirSync","filter","file","endsWith","removeSync","path","join","getImageSet","asset","scales","fileName","assetPathUtils","getResourceIdentifier","basePath","map","scale","idx","suffix","name","type","src","isCatalogAsset","writeImageSet","imageSet","mkdirsSync","dest","copyFileSync","writeJSONSync","images","filename","idiom","info","author","version"],"sources":["../../../src/commands/bundle/assetCatalogIOS.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport path from 'path';\nimport fs from 'fs-extra';\nimport assetPathUtils from './assetPathUtils';\nimport {AssetData} from './buildBundle';\n\nexport function cleanAssetCatalog(catalogDir: string): void {\n  const files = fs\n    .readdirSync(catalogDir)\n    .filter((file) => file.endsWith('.imageset'));\n  for (const file of files) {\n    fs.removeSync(path.join(catalogDir, file));\n  }\n}\n\ntype ImageSet = {\n  basePath: string;\n  files: {name: string; src: string; scale: number}[];\n};\n\nexport function getImageSet(\n  catalogDir: string,\n  asset: AssetData,\n  scales: readonly number[],\n): ImageSet {\n  const fileName = assetPathUtils.getResourceIdentifier(asset);\n  return {\n    basePath: path.join(catalogDir, `${fileName}.imageset`),\n    files: scales.map((scale, idx) => {\n      const suffix = scale === 1 ? '' : `@${scale}x`;\n      return {\n        name: `${fileName + suffix}.${asset.type}`,\n        scale,\n        src: asset.files[idx],\n      };\n    }),\n  };\n}\n\nexport function isCatalogAsset(asset: AssetData): boolean {\n  return asset.type